<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A Hugo website</title>
    <link>/post/</link>
    <description>Recent content in Posts on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leedcode</title>
      <link>/2021/04/07/leedcode/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/04/07/leedcode/</guid>
      <description>Leedcode 67: Add BinaryGiven two string a and b, return their sum as a binary string.
Input: a = &amp;#39;101&amp;#39;, b = &amp;#39;111&amp;#39;Output: &amp;#39;1100&amp;#39;Idea:1. ans can use list and string as the result in a string.if use the string: +if use the list need to add the &#34;&#34;.join()[::-1] at the end
while loop instead the for loop: the length is unsure, both use the index</description>
    </item>
    
    <item>
      <title>Experimental Design </title>
      <link>/2021/03/26/experimental-design/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/03/26/experimental-design/</guid>
      <description>Some concepts and examples in Experimental Design
experimental study: a study subject is assigned the treatmentobservational study: a study with subject is observed or measuredexperimental unit: in an experimental study, basic entity can be assigned is called experimental unit. The experimental unit is people, called subject. At observational and experimental study, subjects are called participants.
Experimental DesignA good experimental design will need:1. treatments are random assigned to the experimental unit.</description>
    </item>
    
    <item>
      <title>Missing Data</title>
      <link>/2021/03/24/missing-data/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/03/24/missing-data/</guid>
      <description>What types of missing data?Missing completely at randomMissing at randomMissing not at randomWhat technique to handle missing data?Listwise or case deletion：assumption：sample size are large
con: simple implementpro: loss given informationPairwise deletion?assumption： not missing here and there,con：compare with the listwise, the lost information reducedpro：cause inaccurate stand error as the knowingMean substitutionn?</description>
    </item>
    
    <item>
      <title>Interview</title>
      <link>/2021/03/22/interview/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/03/22/interview/</guid>
      <description>update my interview experience:
the manager does not ask about a lot regarding the me. But the thing(key word) they care most, like SQL and mongoDB. And ask me to describe the
why you leave the Bank? If you are a peason left the last decent job, they are mostly like to ask.
tell me about yourself -&amp;gt; what can you bring to our company?this is not always asking when you are interviewing.</description>
    </item>
    
    <item>
      <title>Post Workflow </title>
      <link>/2021/03/21/my-posting-workflow/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/03/21/my-posting-workflow/</guid>
      <description>Since I open a blog with the hugo plus git. I spent a lot time researching a simple and easy way to publish a blog. Then I used to the follow steps.
Assumption:
experienced R/R studio, git commit, a exiting blog, knowledge in HTML and CSS
Procedure:
1. in R studio, use the Addins –&amp;gt; New Post –&amp;gt; fill in the information(I choose the .Rmd always)
2. in write the information with the simple markdown syntax</description>
    </item>
    
    <item>
      <title>SAS</title>
      <link>/2021/03/21/sql-sas/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/03/21/sql-sas/</guid>
      <description>SQLYou are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order, and each of their nodes contains a single digit.
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
source
For this problem we will begin with the sashelp.baseball data set.</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/2020/12/01/hello-r-markdown/</link>
      <pubDate>Tue, 01 Dec 2020 21:13:14 -0500</pubDate>
      
      <guid>/2020/12/01/hello-r-markdown/</guid>
      <description>R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.</description>
    </item>
    
    <item>
      <title>A Plain Markdown Post</title>
      <link>/2016/12/30/a-plain-markdown-post/</link>
      <pubDate>Fri, 30 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>/2016/12/30/a-plain-markdown-post/</guid>
      <description>This is a post written in plain Markdown (*.md) instead of R Markdown (*.Rmd). The major differences are:
 You cannot run any R code in a plain Markdown document, whereas in an R Markdown document, you can embed R code chunks (```{r}); A plain Markdown post is rendered through Blackfriday, and an R Markdown document is compiled by rmarkdown and Pandoc.  There are many differences in syntax between Blackfriday&amp;rsquo;s Markdown and Pandoc&amp;rsquo;s Markdown.</description>
    </item>
    
  </channel>
</rss>
